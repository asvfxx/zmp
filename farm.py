import asyncio
import json
import logging
import re
import os
from datetime import datetime, timedelta
from telethon import TelegramClient, errors

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
stop_flag = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'API_ID': 29514367,  # –¢–≤–æ–π API ID
    'API_HASH': 'f8c6ed30b29ca0617db6ebf66618c55d',  # –¢–≤–æ–π API Hash
    'TARGET_BOT': '@zmpgamebot',
    'NOTIFY_CHAT': 'me',  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
    'SESSION_NAME': 'user_session',
    'DEFAULT_CRY_INTERVAL': 6 * 3600,  # 6 —á–∞—Å–æ–≤
    'DEFAULT_DI_INTERVAL': 24 * 3600,  # 24 —á–∞—Å–∞
    'LOG_INTERVAL': 10 * 60,  # 10 –º–∏–Ω—É—Ç
    'RETRY_DELAY': 60,  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ (—Å–µ–∫)
    'MESSAGE_TIMEOUT': 5,  # –¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)
    'BET_PERCENTAGE': 0.5,  # –ü—Ä–æ—Ü–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏ (50%)
    'MIN_BALANCE': 10,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    'STATE_FILE': 'bot_state.json',
    'GAME_HISTORY_FILE': 'game_history.csv',
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='farmbot.log',
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    encoding='utf-8'
)
console = logging.StreamHandler()
console.setLevel(logging.INFO)
console.setFormatter(logging.Formatter('%(asctime)s | %(levelname)s | %(message)s'))
logging.getLogger('').addHandler(console)
logging.getLogger('telethon').setLevel(logging.WARNING)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è Telethon
logger = logging.getLogger(__name__)

class ZMPGameBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º @zmpgamebot."""

    def __init__(self):
        # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        self.client = TelegramClient(CONFIG['SESSION_NAME'], CONFIG['API_ID'], CONFIG['API_HASH'])
        self.balance = 0
        self.loss_counts = {i: 0 for i in range(1, 7)}
        self.win_counts = {i: 0 for i in range(1, 7)}
        self.last_cry_time = 0.0
        self.last_di_time = 0.0
        self.top_position = 0  # –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ
        self.load_state()

    def load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if os.path.exists(CONFIG['STATE_FILE']):
                with open(CONFIG['STATE_FILE'], 'r') as f:
                    state = json.load(f)
                    self.balance = state.get('balance', 0)
                    self.loss_counts = state.get('loss_counts', {i: 0 for i in range(1, 7)})
                    self.win_counts = state.get('win_counts', {i: 0 for i in range(1, 7)})
                    self.last_cry_time = state.get('last_cry_time', 0.0)
                    self.last_di_time = state.get('last_di_time', 0.0)
                    self.top_position = state.get('top_position', 0)
                    logger.info('‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')
                    logger.info(f'  –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: last_cry_time={self.last_cry_time}, last_di_time={self.last_di_time}')
            else:
                logger.info('‚ÑπÔ∏è –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.')
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}')

    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª."""
        try:
            with open(CONFIG['STATE_FILE'], 'w') as f:
                json.dump({
                    'balance': self.balance,
                    'loss_counts': self.loss_counts,
                    'win_counts': self.win_counts,
                    'last_cry_time': self.last_cry_time,
                    'last_di_time': self.last_di_time,
                    'top_position': self.top_position
                }, f, indent=4)
            logger.info('‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}')

    def log_game_result(self, bet: int, number: int, result: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ CSV."""
        try:
            if not os.path.exists(CONFIG['GAME_HISTORY_FILE']):
                with open(CONFIG['GAME_HISTORY_FILE'], 'w', encoding='utf-8') as f:
                    f.write('Timestamp,Bet,Number,Result,Balance\n')
            with open(CONFIG['GAME_HISTORY_FILE'], 'a', encoding='utf-8') as f:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                f.write(f'{timestamp},{bet},{number},{result},{self.balance}\n')
            logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}')

    async def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
        try:
            await self.client.send_message(CONFIG['NOTIFY_CHAT'], message)
            logger.info(f'üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}')
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')

    @staticmethod
    def parse_time_to_sec(text: str) -> int | None:
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1—á 30–º' -> 5400)."""
        h = m = s = 0
        if match_h := re.search(r'(\d+)\s*—á', text):
            h = int(match_h.group(1))
        if match_m := re.search(r'(\d+)\s*–º', text):
            m = int(match_m.group(1))
        if match_s := re.search(r'(\d+)\s*—Å', text):
            s = int(match_s.group(1))
        total = h * 3600 + m * 60 + s
        return total if total > 0 else None

    @staticmethod
    def format_seconds(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3665 -> '1—á 1–º')."""
        h = seconds // 3600
        m = (seconds % 3600) // 60
        s = seconds % 60
        parts = []
        if h > 0:
            parts.append(f'{h}—á')
        if m > 0:
            parts.append(f'{m}–º')
        if s > 0 and h == 0:
            parts.append(f'{s}—Å')
        return ' '.join(parts) if parts else '0—Å'

    @staticmethod
    def absolute_time_str(seconds_from_now: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS."""
        abs_time = datetime.now() + timedelta(seconds=seconds_from_now)
        return abs_time.strftime('%H:%M:%S')

    async def send_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        try:
            await self.client.send_message(CONFIG['TARGET_BOT'], message)
            logger.info(f'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message}')
            return True
        except errors.FloodWaitError as e:
            wait = e.seconds
            logger.error(f'‚è≥ Flood wait –Ω–∞ {wait} —Å–µ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {message}')
            await asyncio.sleep(wait)
            return False
        except errors.RPCError as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {message}: {e}')
            return False
        except Exception as e:
            logger.error(f'‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {message}: {e}')
            return False

    async def get_last_message(self) -> str | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞."""
        try:
            async for message in self.client.iter_messages(CONFIG['TARGET_BOT'], limit=1):
                return message.message
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        return None

    async def parse_balance(self, text: str) -> tuple[int | None, int | None]:
        """–ü–∞—Ä—Å–∏—Ç –±–∞–ª–∞–Ω—Å –∏ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
        balance = None
        top_position = None
        if match_balance := re.search(r'‚Ä¢ –¢–µ–∫—É—â–∏–µ —Å–ª—ë–∑—ã:\s*(\d+)', text):
            balance = int(match_balance.group(1))
        if match_top := re.search(r'‚Ä¢ –¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:\s*(\d+)', text):
            top_position = int(match_top.group(1))
        return balance, top_position

    def choose_bet_number(self) -> int:
        """–í—ã–±–∏—Ä–∞–µ—Ç —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π."""
        number = min(self.loss_counts, key=self.loss_counts.get)
        scores = {i: self.win_counts[i] / (self.loss_counts[i] + 1) for i in range(1, 7)}
        logger.info(f'üé≤ –í—ã–±—Ä–∞–Ω–æ —á–∏—Å–ª–æ {number} (–≤—ã–∏–≥—Ä—ã—à–∏: {self.win_counts}, –ø—Ä–æ–∏–≥—Ä—ã—à–∏: {self.loss_counts}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {scores})')
        return number

    async def log_remaining_time(self, cry_wait: int, di_wait: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        logger.info('‚ïê' * 50)
        logger.info('üïí –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç')
        logger.info(f'  –ë–∞–ª–∞–Ω—Å: {self.balance} —Å–ª—ë–∑')
        logger.info(f'  –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {self.top_position if self.top_position else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}')
        logger.info(f'  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π: {self.win_counts}')
        logger.info(f'  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: {self.loss_counts}')
        logger.info(f'  –í—Ä–µ–º—è –¥–æ /cry: {self.format_seconds(cry_wait)} (–≤ {self.absolute_time_str(cry_wait)})')
        logger.info(f'  –í—Ä–µ–º—è –¥–æ /di: {self.format_seconds(di_wait)} (–≤ {self.absolute_time_str(di_wait)})')
        logger.info('‚ïê' * 50)

    async def farm_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–∞—Ä–º–∞."""
        last_log_time = asyncio.get_event_loop().time()
        logger.info('‚ïê' * 50)
        logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ —Ñ–∞—Ä–º–∞')
        logger.info('‚ïê' * 50)

        while True:
            if stop_flag:
                logger.info('üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /stop.')
                await self.client.disconnect()
                break

            try:
                now = asyncio.get_event_loop().time()
                cry_wait = max(0, int(self.last_cry_time - now))  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ /cry
                di_wait = max(0, int(self.last_di_time - now))    # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ /di
                logger.info(f'‚è≥ –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: cry_wait={self.format_seconds(cry_wait)}, di_wait={self.format_seconds(di_wait)}')

                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                if now - last_log_time >= CONFIG['LOG_INTERVAL']:
                    await self.log_remaining_time(cry_wait, di_wait)
                    last_log_time = now
                    logger.info(f'üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ last_log_time: {last_log_time}')

                # –ö–æ–º–∞–Ω–¥–∞ /cry (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)
                if cry_wait == 0:
                    logger.info('‚úÖ –í—Ä–µ–º—è –¥–ª—è /cry –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É.')
                    if await self.send_message('/cry'):
                        await asyncio.sleep(CONFIG['MESSAGE_TIMEOUT'])
                        reply = await self.get_last_message()
                        if reply:
                            logger.info(f'üì® –û—Ç–≤–µ—Ç –Ω–∞ /cry:\n{reply}')
                            if '–¢—ã —É–∂–µ –ø–ª–∞–∫–∞–ª' in reply:
                                wait_sec = self.parse_time_to_sec(reply) or CONFIG['DEFAULT_CRY_INTERVAL']
                                self.last_cry_time = now + wait_sec
                                logger.info(f'‚è± /cry –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {self.format_seconds(wait_sec)}.')
                            else:
                                self.last_cry_time = now + CONFIG['DEFAULT_CRY_INTERVAL']
                                if m := re.search(r'–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è (\d+) —Å–ª', reply):
                                    self.balance = int(m.group(1))
                                    logger.info(f'‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {self.balance}')
                                    if self.balance >= CONFIG['MIN_BALANCE'] * 2:
                                        await self.send_notification(f'–ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {self.balance} —Å–ª—ë–∑!')
                            self.save_state()
                        else:
                            logger.warning('‚ùó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /cry')
                            await self.send_notification('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /cry')
                            await asyncio.sleep(CONFIG['RETRY_DELAY'])
                            continue
                    else:
                        await asyncio.sleep(CONFIG['RETRY_DELAY'])
                        continue
                else:
                    logger.info(f'‚è≥ /cry –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {self.format_seconds(cry_wait)}.')

                # –ö–æ–º–∞–Ω–¥–∞ /my (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
                if await self.send_message('/my'):
                    await asyncio.sleep(CONFIG['MESSAGE_TIMEOUT'])
                    reply = await self.get_last_message()
                    if reply:
                        logger.info(f'üì® –û—Ç–≤–µ—Ç –Ω–∞ /my:\n{reply}')
                        balance, top_position = await self.parse_balance(reply)
                        if balance is not None:
                            if balance != self.balance:
                                self.balance = balance
                                logger.info(f'‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {self.balance}')
                        if top_position is not None:
                            if top_position != self.top_position:
                                self.top_position = top_position
                                logger.info(f'‚ÑπÔ∏è –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.top_position}')
                        if balance is None:
                            logger.warning('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ /my')
                        self.save_state()
                    else:
                        logger.warning('‚ùó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /my')
                        await self.send_notification('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /my')
                        await asyncio.sleep(CONFIG['RETRY_DELAY'])
                        continue
                else:
                    await asyncio.sleep(CONFIG['RETRY_DELAY'])
                    continue

                # –ö–æ–º–∞–Ω–¥–∞ /di (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞)
                now = asyncio.get_event_loop().time()
                di_wait = max(0, int(self.last_di_time - now))
                if di_wait == 0 and self.balance >= CONFIG['MIN_BALANCE']:
                    logger.info('‚úÖ –í—Ä–µ–º—è –¥–ª—è /di –∏—Å—Ç–µ–∫–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É.')
                    bet = max(1, int(self.balance * CONFIG['BET_PERCENTAGE']))
                    number = self.choose_bet_number()
                    cmd = f'/di {bet} {number}'
                    if await self.send_message(cmd):
                        await asyncio.sleep(CONFIG['MESSAGE_TIMEOUT'])
                        reply = await self.get_last_message()
                        if reply:
                            logger.info(f'üì® –û—Ç–≤–µ—Ç –Ω–∞ {cmd}:\n{reply}')
                            if '–¢—ã –≤—ã–∏–≥—Ä–∞–ª' in reply:
                                self.balance += bet
                                self.win_counts[number] += 1
                                self.loss_counts[number] = max(0, self.loss_counts[number] - 1)
                                logger.info(f'üéâ –í—ã–∏–≥—Ä—ã—à! –ë–∞–ª–∞–Ω—Å: {self.balance}')
                                self.log_game_result(bet, number, 'Win')
                                await self.send_notification(f'üéâ –í—ã–∏–≥—Ä–∞–ª {bet} —Å–ª—ë–∑! –ë–∞–ª–∞–Ω—Å: {self.balance}')
                                self.last_di_time = now + CONFIG['DEFAULT_DI_INTERVAL']
                            elif '–¢—ã –Ω–µ —É–≥–∞–¥–∞–ª' in reply or '–ø—Ä–æ–∏–≥—Ä–∞–ª' in reply:
                                self.balance -= bet
                                self.loss_counts[number] += 1
                                logger.info(f'üòû –ü—Ä–æ–∏–≥—Ä—ã—à. –ë–∞–ª–∞–Ω—Å: {self.balance}')
                                self.log_game_result(bet, number, 'Loss')
                                await self.send_notification(f'üòû –ü—Ä–æ–∏–≥—Ä–∞–ª {bet} —Å–ª—ë–∑. –ë–∞–ª–∞–Ω—Å: {self.balance}')
                                self.last_di_time = now + CONFIG['DEFAULT_DI_INTERVAL']
                            self.save_state()
                        else:
                            logger.warning('‚ùó –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /di')
                            await self.send_notification('‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /di')
                            await asyncio.sleep(CONFIG['RETRY_DELAY'])
                            continue
                    else:
                        await asyncio.sleep(CONFIG['RETRY_DELAY'])
                        continue
                else:
                    logger.info(f'‚è≥ /di –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {self.format_seconds(di_wait)} –∏–ª–∏ –±–∞–ª–∞–Ω—Å {self.balance} < {CONFIG["MIN_BALANCE"]}.')

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}')
                await self.send_notification(f'‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
                await asyncio.sleep(CONFIG['RETRY_DELAY'])

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            await self.client.start(phone='+39 351 447 7989',
            code_callback=lambda: '92333')
            logger.info('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
            await self.farm_cycle()
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')
            await self.send_notification(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}')

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    bot = ZMPGameBot()
    await bot.start()

if __name__ == "__main__":
    asyncio.run(main())
